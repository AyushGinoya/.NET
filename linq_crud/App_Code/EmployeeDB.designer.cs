#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Test")]
public partial class EmployeeDBDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertEMPLOYEE(EMPLOYEE instance);
  partial void UpdateEMPLOYEE(EMPLOYEE instance);
  partial void DeleteEMPLOYEE(EMPLOYEE instance);
  partial void InsertDEPARTMENT(DEPARTMENT instance);
  partial void UpdateDEPARTMENT(DEPARTMENT instance);
  partial void DeleteDEPARTMENT(DEPARTMENT instance);
  partial void InsertPROJECT(PROJECT instance);
  partial void UpdatePROJECT(PROJECT instance);
  partial void DeletePROJECT(PROJECT instance);
  #endregion
	
	public EmployeeDBDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EmployeeDBDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EmployeeDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EmployeeDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<EMPLOYEE> EMPLOYEEs
	{
		get
		{
			return this.GetTable<EMPLOYEE>();
		}
	}
	
	public System.Data.Linq.Table<DEPARTMENT> DEPARTMENTs
	{
		get
		{
			return this.GetTable<DEPARTMENT>();
		}
	}
	
	public System.Data.Linq.Table<PROJECT> PROJECTs
	{
		get
		{
			return this.GetTable<PROJECT>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EMPLOYEE")]
public partial class EMPLOYEE : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EMPLOYEEID;
	
	private string _FIRSTNAME;
	
	private string _LASTNAME;
	
	private System.DateTime _DOB;
	
	private string _GENDER;
	
	private System.DateTime _HIREDATE;
	
	private int _DEPARTMENTID;
	
	private decimal _SALARY;
	
	private EntitySet<DEPARTMENT> _DEPARTMENTs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEMPLOYEEIDChanging(int value);
    partial void OnEMPLOYEEIDChanged();
    partial void OnFIRSTNAMEChanging(string value);
    partial void OnFIRSTNAMEChanged();
    partial void OnLASTNAMEChanging(string value);
    partial void OnLASTNAMEChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    partial void OnGENDERChanging(string value);
    partial void OnGENDERChanged();
    partial void OnHIREDATEChanging(System.DateTime value);
    partial void OnHIREDATEChanged();
    partial void OnDEPARTMENTIDChanging(int value);
    partial void OnDEPARTMENTIDChanged();
    partial void OnSALARYChanging(decimal value);
    partial void OnSALARYChanged();
    #endregion
	
	public EMPLOYEE()
	{
		this._DEPARTMENTs = new EntitySet<DEPARTMENT>(new Action<DEPARTMENT>(this.attach_DEPARTMENTs), new Action<DEPARTMENT>(this.detach_DEPARTMENTs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPLOYEEID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int EMPLOYEEID
	{
		get
		{
			return this._EMPLOYEEID;
		}
		set
		{
			if ((this._EMPLOYEEID != value))
			{
				this.OnEMPLOYEEIDChanging(value);
				this.SendPropertyChanging();
				this._EMPLOYEEID = value;
				this.SendPropertyChanged("EMPLOYEEID");
				this.OnEMPLOYEEIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIRSTNAME", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string FIRSTNAME
	{
		get
		{
			return this._FIRSTNAME;
		}
		set
		{
			if ((this._FIRSTNAME != value))
			{
				this.OnFIRSTNAMEChanging(value);
				this.SendPropertyChanging();
				this._FIRSTNAME = value;
				this.SendPropertyChanged("FIRSTNAME");
				this.OnFIRSTNAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LASTNAME", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string LASTNAME
	{
		get
		{
			return this._LASTNAME;
		}
		set
		{
			if ((this._LASTNAME != value))
			{
				this.OnLASTNAMEChanging(value);
				this.SendPropertyChanging();
				this._LASTNAME = value;
				this.SendPropertyChanged("LASTNAME");
				this.OnLASTNAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="DateTime NOT NULL")]
	public System.DateTime DOB
	{
		get
		{
			return this._DOB;
		}
		set
		{
			if ((this._DOB != value))
			{
				this.OnDOBChanging(value);
				this.SendPropertyChanging();
				this._DOB = value;
				this.SendPropertyChanged("DOB");
				this.OnDOBChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GENDER", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string GENDER
	{
		get
		{
			return this._GENDER;
		}
		set
		{
			if ((this._GENDER != value))
			{
				this.OnGENDERChanging(value);
				this.SendPropertyChanging();
				this._GENDER = value;
				this.SendPropertyChanged("GENDER");
				this.OnGENDERChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HIREDATE", DbType="DateTime NOT NULL")]
	public System.DateTime HIREDATE
	{
		get
		{
			return this._HIREDATE;
		}
		set
		{
			if ((this._HIREDATE != value))
			{
				this.OnHIREDATEChanging(value);
				this.SendPropertyChanging();
				this._HIREDATE = value;
				this.SendPropertyChanged("HIREDATE");
				this.OnHIREDATEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPARTMENTID", DbType="Int NOT NULL")]
	public int DEPARTMENTID
	{
		get
		{
			return this._DEPARTMENTID;
		}
		set
		{
			if ((this._DEPARTMENTID != value))
			{
				this.OnDEPARTMENTIDChanging(value);
				this.SendPropertyChanging();
				this._DEPARTMENTID = value;
				this.SendPropertyChanged("DEPARTMENTID");
				this.OnDEPARTMENTIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SALARY", DbType="Decimal(10,2) NOT NULL")]
	public decimal SALARY
	{
		get
		{
			return this._SALARY;
		}
		set
		{
			if ((this._SALARY != value))
			{
				this.OnSALARYChanging(value);
				this.SendPropertyChanging();
				this._SALARY = value;
				this.SendPropertyChanged("SALARY");
				this.OnSALARYChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_DEPARTMENT", Storage="_DEPARTMENTs", ThisKey="EMPLOYEEID", OtherKey="MANAGERID")]
	public EntitySet<DEPARTMENT> DEPARTMENTs
	{
		get
		{
			return this._DEPARTMENTs;
		}
		set
		{
			this._DEPARTMENTs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DEPARTMENTs(DEPARTMENT entity)
	{
		this.SendPropertyChanging();
		entity.EMPLOYEE = this;
	}
	
	private void detach_DEPARTMENTs(DEPARTMENT entity)
	{
		this.SendPropertyChanging();
		entity.EMPLOYEE = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DEPARTMENTS")]
public partial class DEPARTMENT : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DEPARTMENTID;
	
	private string _DEPARTMENTNAME;
	
	private int _MANAGERID;
	
	private string _LOCATION;
	
	private EntitySet<PROJECT> _PROJECTs;
	
	private EntityRef<EMPLOYEE> _EMPLOYEE;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDEPARTMENTIDChanging(int value);
    partial void OnDEPARTMENTIDChanged();
    partial void OnDEPARTMENTNAMEChanging(string value);
    partial void OnDEPARTMENTNAMEChanged();
    partial void OnMANAGERIDChanging(int value);
    partial void OnMANAGERIDChanged();
    partial void OnLOCATIONChanging(string value);
    partial void OnLOCATIONChanged();
    #endregion
	
	public DEPARTMENT()
	{
		this._PROJECTs = new EntitySet<PROJECT>(new Action<PROJECT>(this.attach_PROJECTs), new Action<PROJECT>(this.detach_PROJECTs));
		this._EMPLOYEE = default(EntityRef<EMPLOYEE>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPARTMENTID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int DEPARTMENTID
	{
		get
		{
			return this._DEPARTMENTID;
		}
		set
		{
			if ((this._DEPARTMENTID != value))
			{
				this.OnDEPARTMENTIDChanging(value);
				this.SendPropertyChanging();
				this._DEPARTMENTID = value;
				this.SendPropertyChanged("DEPARTMENTID");
				this.OnDEPARTMENTIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPARTMENTNAME", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string DEPARTMENTNAME
	{
		get
		{
			return this._DEPARTMENTNAME;
		}
		set
		{
			if ((this._DEPARTMENTNAME != value))
			{
				this.OnDEPARTMENTNAMEChanging(value);
				this.SendPropertyChanging();
				this._DEPARTMENTNAME = value;
				this.SendPropertyChanged("DEPARTMENTNAME");
				this.OnDEPARTMENTNAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MANAGERID", DbType="Int NOT NULL")]
	public int MANAGERID
	{
		get
		{
			return this._MANAGERID;
		}
		set
		{
			if ((this._MANAGERID != value))
			{
				if (this._EMPLOYEE.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMANAGERIDChanging(value);
				this.SendPropertyChanging();
				this._MANAGERID = value;
				this.SendPropertyChanged("MANAGERID");
				this.OnMANAGERIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOCATION", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string LOCATION
	{
		get
		{
			return this._LOCATION;
		}
		set
		{
			if ((this._LOCATION != value))
			{
				this.OnLOCATIONChanging(value);
				this.SendPropertyChanging();
				this._LOCATION = value;
				this.SendPropertyChanged("LOCATION");
				this.OnLOCATIONChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTMENT_PROJECT", Storage="_PROJECTs", ThisKey="DEPARTMENTID", OtherKey="DEPARTMENTID")]
	public EntitySet<PROJECT> PROJECTs
	{
		get
		{
			return this._PROJECTs;
		}
		set
		{
			this._PROJECTs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_DEPARTMENT", Storage="_EMPLOYEE", ThisKey="MANAGERID", OtherKey="EMPLOYEEID", IsForeignKey=true)]
	public EMPLOYEE EMPLOYEE
	{
		get
		{
			return this._EMPLOYEE.Entity;
		}
		set
		{
			EMPLOYEE previousValue = this._EMPLOYEE.Entity;
			if (((previousValue != value) 
						|| (this._EMPLOYEE.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EMPLOYEE.Entity = null;
					previousValue.DEPARTMENTs.Remove(this);
				}
				this._EMPLOYEE.Entity = value;
				if ((value != null))
				{
					value.DEPARTMENTs.Add(this);
					this._MANAGERID = value.EMPLOYEEID;
				}
				else
				{
					this._MANAGERID = default(int);
				}
				this.SendPropertyChanged("EMPLOYEE");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PROJECTs(PROJECT entity)
	{
		this.SendPropertyChanging();
		entity.DEPARTMENT = this;
	}
	
	private void detach_PROJECTs(PROJECT entity)
	{
		this.SendPropertyChanging();
		entity.DEPARTMENT = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PROJECTS")]
public partial class PROJECT : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PROJECTID;
	
	private string _PROJECTNAME;
	
	private System.DateTime _STARTDATE;
	
	private System.DateTime _ENDDATE;
	
	private int _DEPARTMENTID;
	
	private EntityRef<DEPARTMENT> _DEPARTMENT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPROJECTIDChanging(int value);
    partial void OnPROJECTIDChanged();
    partial void OnPROJECTNAMEChanging(string value);
    partial void OnPROJECTNAMEChanged();
    partial void OnSTARTDATEChanging(System.DateTime value);
    partial void OnSTARTDATEChanged();
    partial void OnENDDATEChanging(System.DateTime value);
    partial void OnENDDATEChanged();
    partial void OnDEPARTMENTIDChanging(int value);
    partial void OnDEPARTMENTIDChanged();
    #endregion
	
	public PROJECT()
	{
		this._DEPARTMENT = default(EntityRef<DEPARTMENT>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROJECTID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int PROJECTID
	{
		get
		{
			return this._PROJECTID;
		}
		set
		{
			if ((this._PROJECTID != value))
			{
				this.OnPROJECTIDChanging(value);
				this.SendPropertyChanging();
				this._PROJECTID = value;
				this.SendPropertyChanged("PROJECTID");
				this.OnPROJECTIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROJECTNAME", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string PROJECTNAME
	{
		get
		{
			return this._PROJECTNAME;
		}
		set
		{
			if ((this._PROJECTNAME != value))
			{
				this.OnPROJECTNAMEChanging(value);
				this.SendPropertyChanging();
				this._PROJECTNAME = value;
				this.SendPropertyChanged("PROJECTNAME");
				this.OnPROJECTNAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STARTDATE", DbType="DateTime NOT NULL")]
	public System.DateTime STARTDATE
	{
		get
		{
			return this._STARTDATE;
		}
		set
		{
			if ((this._STARTDATE != value))
			{
				this.OnSTARTDATEChanging(value);
				this.SendPropertyChanging();
				this._STARTDATE = value;
				this.SendPropertyChanged("STARTDATE");
				this.OnSTARTDATEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENDDATE", DbType="DateTime NOT NULL")]
	public System.DateTime ENDDATE
	{
		get
		{
			return this._ENDDATE;
		}
		set
		{
			if ((this._ENDDATE != value))
			{
				this.OnENDDATEChanging(value);
				this.SendPropertyChanging();
				this._ENDDATE = value;
				this.SendPropertyChanged("ENDDATE");
				this.OnENDDATEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPARTMENTID", DbType="Int NOT NULL")]
	public int DEPARTMENTID
	{
		get
		{
			return this._DEPARTMENTID;
		}
		set
		{
			if ((this._DEPARTMENTID != value))
			{
				if (this._DEPARTMENT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDEPARTMENTIDChanging(value);
				this.SendPropertyChanging();
				this._DEPARTMENTID = value;
				this.SendPropertyChanged("DEPARTMENTID");
				this.OnDEPARTMENTIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTMENT_PROJECT", Storage="_DEPARTMENT", ThisKey="DEPARTMENTID", OtherKey="DEPARTMENTID", IsForeignKey=true)]
	public DEPARTMENT DEPARTMENT
	{
		get
		{
			return this._DEPARTMENT.Entity;
		}
		set
		{
			DEPARTMENT previousValue = this._DEPARTMENT.Entity;
			if (((previousValue != value) 
						|| (this._DEPARTMENT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DEPARTMENT.Entity = null;
					previousValue.PROJECTs.Remove(this);
				}
				this._DEPARTMENT.Entity = value;
				if ((value != null))
				{
					value.PROJECTs.Add(this);
					this._DEPARTMENTID = value.DEPARTMENTID;
				}
				else
				{
					this._DEPARTMENTID = default(int);
				}
				this.SendPropertyChanged("DEPARTMENT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
